"""
Django settings for NovaEra project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from importlib.resources import Resource
from pathlib import Path
from decouple import config
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print ("base dir path", BASE_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = config('production_secret_key')
SECRET_KEY = 'django-insecure-n^&le##@@+9%tc!s*8rjq4-l_x7yezo1j(745nln0x@%(vv&)!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#Eiqui a parte de ter o meu host local (127.0.0.1) engado tamén o host de heroku
#ALLOWED_HOSTS = ['127.0.0.1', '0.0.0.0', 'novaera.up.railway.app', 'novaera.gal', '*.novaera.gal', 'www.novaera.gal']
ALLOWED_HOSTS = ['*']

#Esto é para que non me de error a hora de completar os formularios no móbil nin en ningún outro dispositivo
CSRF_TRUSTED_ORIGINS = ['https://novaera.gal', 'https://*.novaera.gal', 'https://novaera.up.railway.app', 'https://novaera.up.railway.app*']
CSRF_COOKIE_SECURE = False

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #Esto é para implementar os botóns de share no blog
    'django_social_share',
    'widget_tweaks',
    #my apps
    'artigos',
    'banda_contratacion',
    'newsletter',
    'faladoiras',
    #Installing the Amazon Web Service Storage
    'storages',
    #Para implementar o rich text no cuadro do text field dos artículos
    #https://www.geeksforgeeks.org/richtextfield-django-models/
    'ckeditor',
    'ckeditor_uploader',
    'entradas'
]

# ESto é para o cheditor que me estaba dando error
CKEDITOR_UPLOAD_PATH = 'content/ckeditor/'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #Incluir eiqui o whitenoise para os archivos estáticos unha vez que estos se suban a heroku
    'whitenoise.middleware.WhiteNoiseMiddleware'
]

ROOT_URLCONF = 'NovaEra.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'NovaEra/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NovaEra.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
# No caso de que as tablas non se che creen cando fas makemigrations e migrate utiliza este
# comando: "python manage.py migrate --run-syncdb"

#Vídeo to set up the Railway account with the postgres database
#https://www.youtube.com/watch?v=HEV1PWycOuQ&t=62s
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'railway',
        'PGUSER': 'postgres', 
        'PGPASSWORD': '115Fcg1G4AD22EFaAdD2fE26FDCCAacb',
        'PGHOST': 'viaduct.proxy.rlwy.net', 
        'PGPORT': '13753',
    }
}
#-------------------end---------database local configuration---------------------

import dj_database_url

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'gl-ES'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#VÍDEOQ QUE TE TES QUEVER PARA QUE OS ARQUIVOS ESTÁTICOS QUE SUBA A PEÑITA SE GARDEN EN S3 (Amazon web services):
# https://www.youtube.com/watch?v=inQyZ7zFMHM
#Configuración do AWS 

#IMPORTNATÍSIMO ESTO PARA QUE CHE CARGUE OS ARCHIVOS QUE TES EN AMAZON
AWS_S3_REGION_NAME = 'eu-west-3' #change to your region
AWS_S3_SIGNATURE_VERSION = 's3v4'
#--------------------------------------------------------------------------
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = 'bandadegaitas-novaera'
#Esto é "AWS_QUERYSTRING_AUTH = False" é IMPORTANTÍSIMO. O checkeditor(rich text) do artigos content
#que permite introducir o texto con estilo, párrafos e demais cousas non funcion. Eu creo que os arquivos
#estáticos que están relacionados con este paquete cando están subidos ao S3 (AWS) nn funcionan ben.
#Por eso, con esta liña de código as cousas non dan problemas e temos o rich text cando todo está en production
AWS_QUERYSTRING_AUTH = False
AWS_S3_FILE_OVERWRITE = True
AWS_DEFAULT_ACL = None
#En AWS (S3) é onde se van a gardar os arquivos que os usuarios da web van a subir
#ESto é para que as imaxes que a xente sube ao crear un blog se garden na seguinte ruta
AWS_MEDIA='mediafiles'
#MEDIA_ROOT = os.path.join(BASE_DIR, "NovaEra/mediafiles/")
#IMPORTANTE. O MEDIA_URL creo que non che vale para nada. O que define onde se gardan os arquivos que a
#xente sube e coa función "upload_image_path(instance, filename)" definida en artigos > models.py
#MEDIA_URL = f'https://bandadegaitas-novaera/{AWS_MEDIA}/'
#The DEFAULT_FILE_STORAGE setting allows you to set the storage to use by default. This eliminates the need
#to assign `storages to individual fields, and eliminates the need to create migration files even if the 
#storage changes. Esto do default_file storage indica onnde se gardan os media files
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
#Esto é para referirse os arquivos estáticos da páxina web.
AWS_LOCATION = 'static'
STATIC_URL = f'https://bandadegaitas-novaera/{AWS_LOCATION}/'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'

#SMTP Configuration para envío de emails
# https://www.youtube.com/watch?v=sFPcd6myZrY
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = 'bandadegaitasnovaera@gmail.com'
EMAIL_HOST_PASSWORD = 'qceatknnawcsndte'

#PAra tema de GitHub, se tes problemas cas branches ou co historial colles e fas o que di esta páxina:
#https://docs.github.com/es/desktop/contributing-and-collaborating-using-github-desktop/adding-and-cloning-repositories/adding-an-existing-project-to-github-using-github-desktop

#Pasos para facer deploy dende o teu ordenador:
#Para facer esto tes que instalar o CLI de heroku
# heroku login
# git init
# git add .
# git commit -m "nome-do-commit"
# heroku git:remote -a novaera
# git push heroku main

#Para crear o requirements.txt file necesario para facer o deploy en Heroku:
#pip freeze > requirements.txt

#Cando fas un cambio no modelo e tes que replicalo na base de datos de Heroku

#Vídeo espectacular que che explica como facer push en GitHub.
#  https://www.youtube.com/watch?v=qMck70tLDuo
# git init (Crea a carpeta .git na carpeta)
# git status (Para ver os arquivos que teñen cambios)
# git add . (Para añadir os arquivos a carpeta git init e logo subilos)
# git commit -m "nome_do_commit"
# git push origin main (No caso de que así non che vaia fas "git push origin HEAD:main" ou senon falo cun force "git push -f origin HEAD:main")
#To stablsih the connection with the git hub report
# git remote add origin <REMOTE_URL>
# git remote -v (Para chequear o link do repoistorio a onde lle vas facer push ao proxecto)

# O certificado SSL téñoo con CloudFare:
# https://dash.cloudflare.com/d178b3414230bc5aa19afedf16304998/novaera.gal


#IMPORTANTÍSIMO PARA CORRER O PROXECTO EN LOCAL
# Creouse unha carpeta settings ('Novaera/settings') con 2 archivos. Un archivo coa configuración para correr o proxecto en producción, e o outro coa configuración para correr o archivo
# en local. Para correr o archivo en local tes que facer o seguinte:
#  -    Descomenta o código do Secret Key neste archivo (no archivo settings). O secret key de django
#  -    Na carpeta de settings, cambiaslle o nome o archivo de settings para que se chame "settings.py"
#  -    O archivo de settings.py que está fora desa caperta renoméalo a "settings_stand_by", por exemplo
#  -    No archivo de manage.py cambias a configuración de "NovaEra.settings" a "NovaEra.settings.settings", pero solo na primeira función:
#  -    Despois corres o seguinte comando "python manage.py runserver --settings=NovaEra.settings.development"
#  -    CALQUERA COMANDO QUE TEÑA un "manage.py" TEN QUE TER O "--settings=NovaEra.settings.development" ao final para que funcione en local

#  -    Para enviar o código a producción tes que desfacer os pasos que fixeches anteriormente.

# A anterior info está collida deste víde de youtube:
# https://www.youtube.com/watch?v=mI114SF2urA
